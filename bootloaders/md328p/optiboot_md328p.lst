
optiboot_md328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00007400  00007400  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bootv        00000004  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  2 .version      00000002  000077fe  000077fe  00000454  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006d  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000337  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a6  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c6  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000344  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007400 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    7400:	11 24       	eor	r1, r1
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
  SP=RAMEND;  // This is done by hardware reset
    7402:	8f ef       	ldi	r24, 0xFF	; 255
    7404:	98 e0       	ldi	r25, 0x08	; 8
    7406:	9e bf       	out	0x3e, r25	; 62
    7408:	8d bf       	out	0x3d, r24	; 61
  if(pmask == 0)
	OSCCAL = 0xae;
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    740a:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
    740c:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    740e:	89 2f       	mov	r24, r25
    7410:	8d 70       	andi	r24, 0x0D	; 13
    7412:	11 f0       	breq	.+4      	; 0x7418 <main+0x18>
	appStart(ch);
    7414:	89 2f       	mov	r24, r25
    7416:	ec d1       	rcall	.+984    	; 0x77f0 <appStart>

  // WDT clock by 32KHz IRC
  PMCR = 0x80;
    7418:	90 e8       	ldi	r25, 0x80	; 128
    741a:	90 93 f2 00 	sts	0x00F2, r25
  PMCR = 0x93;
    741e:	83 e9       	ldi	r24, 0x93	; 147
    7420:	80 93 f2 00 	sts	0x00F2, r24

#if EXT_OSC == 1
#warning Using external crystal now!!!
  // for case of 16MHz crystall, no clock divider
  PMCR = 0x80;
    7424:	90 93 f2 00 	sts	0x00F2, r25
  PMCR = 0x97;
    7428:	87 e9       	ldi	r24, 0x97	; 151
    742a:	80 93 f2 00 	sts	0x00F2, r24
  for(ch = 0xf; ch > 0; --ch);
  PMCR = 0x80;
    742e:	90 93 f2 00 	sts	0x00F2, r25
  PMCR = 0xb7;
    7432:	87 eb       	ldi	r24, 0xB7	; 183
    7434:	80 93 f2 00 	sts	0x00F2, r24

  CLKPR = 0x80;
    7438:	90 93 61 00 	sts	0x0061, r25
  CLKPR = 0x00;
    743c:	10 92 61 00 	sts	0x0061, r1
  CLKPR = 0x80;
  CLKPR = 0x01;
#endif

  // enable 1KB E2PROM (for MD328P)
  ECCR = 0x80;
    7440:	96 bf       	out	0x36, r25	; 54
  ECCR = 0x4C;
    7442:	8c e4       	ldi	r24, 0x4C	; 76
    7444:	86 bf       	out	0x36, r24	; 54

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7446:	85 e0       	ldi	r24, 0x05	; 5
    7448:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    744c:	82 e0       	ldi	r24, 0x02	; 2
    744e:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7452:	88 e1       	ldi	r24, 0x18	; 24
    7454:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7458:	86 e0       	ldi	r24, 0x06	; 6
    745a:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( F_CPU / (BAUD_RATE * 8L) - 1 );
    745e:	80 e1       	ldi	r24, 0x10	; 16
    7460:	80 93 c4 00 	sts	0x00C4, r24
  //UART_SRL = (uint8_t)( F_CPU / (BAUD_RATE * 16L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_32MS);
    7464:	8d e0       	ldi	r24, 0x0D	; 13
    7466:	ae d1       	rcall	.+860    	; 0x77c4 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7468:	25 9a       	sbi	0x04, 5	; 4
    746a:	96 e0       	ldi	r25, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    746c:	20 e3       	ldi	r18, 0x30	; 48
    746e:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7470:	51 e0       	ldi	r21, 0x01	; 1
    while(!(TIFR1 & _BV(TOV1)));
    LED_PORT ^= _BV(LED);
    7472:	40 e2       	ldi	r20, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7474:	30 93 85 00 	sts	0x0085, r19
    7478:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    747c:	56 bb       	out	0x16, r21	; 22
    while(!(TIFR1 & _BV(TOV1)));
    747e:	b0 9b       	sbis	0x16, 0	; 22
    7480:	fe cf       	rjmp	.-4      	; 0x747e <main+0x7e>
    LED_PORT ^= _BV(LED);
    7482:	85 b1       	in	r24, 0x05	; 5
    7484:	84 27       	eor	r24, r20
    7486:	85 b9       	out	0x05, r24	; 5
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7488:	a8 95       	wdr
    TCNT1 = -(F_CPU/(1024*16));
    TIFR1 = _BV(TOV1);
    while(!(TIFR1 & _BV(TOV1)));
    LED_PORT ^= _BV(LED);
    watchdogReset();
  } while (--count);
    748a:	91 50       	subi	r25, 0x01	; 1
    748c:	99 f7       	brne	.-26     	; 0x7474 <main+0x74>
    748e:	66 24       	eor	r6, r6
    7490:	77 24       	eor	r7, r7
    7492:	43 01       	movw	r8, r6
    7494:	cc 24       	eor	r12, r12
    7496:	dd 24       	eor	r13, r13
	  buff[26] = buff[2];
	  buff[27] = buff[3];
	
	  // Add jump to bootloader at RESET vector
	  buff[0] = 0x0c;
	  buff[1] = 0x94; // jmp 
    7498:	64 e9       	ldi	r22, 0x94	; 148
    749a:	a6 2e       	mov	r10, r22
      EEARL = 0; 
      EEARH = address >> 8;
      ch = EEARH >> 2;	// 1KB page size

      if((0 == (pmask & (((uint32_t)1 << ch)))) && bval == 'F') { 
	pmask |= ((uint32_t)1 << ch);
    749c:	51 e0       	ldi	r21, 0x01	; 1
    749e:	25 2e       	mov	r2, r21
    74a0:	31 2c       	mov	r3, r1
    74a2:	41 2c       	mov	r4, r1
    74a4:	51 2c       	mov	r5, r1
  pmask = 0;

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    74a6:	7d d1       	rcall	.+762    	; 0x77a2 <getch>

    if(ch == STK_GET_PARAMETER) {
    74a8:	81 34       	cpi	r24, 0x41	; 65
    74aa:	61 f4       	brne	.+24     	; 0x74c4 <main+0xc4>
      unsigned char which = getch();
    74ac:	7a d1       	rcall	.+756    	; 0x77a2 <getch>
    74ae:	18 2f       	mov	r17, r24
      verifySpace();
    74b0:	8f d1       	rcall	.+798    	; 0x77d0 <verifySpace>
      if (which == 0x82) {
    74b2:	12 38       	cpi	r17, 0x82	; 130
    74b4:	29 f1       	breq	.+74     	; 0x7500 <main+0x100>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    74b6:	11 38       	cpi	r17, 0x81	; 129
    74b8:	11 f4       	brne	.+4      	; 0x74be <main+0xbe>
	  putch(OPTIBOOT_MAJVER);
    74ba:	85 e0       	ldi	r24, 0x05	; 5
    74bc:	01 c0       	rjmp	.+2      	; 0x74c0 <main+0xc0>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    74be:	83 e0       	ldi	r24, 0x03	; 3
    74c0:	68 d1       	rcall	.+720    	; 0x7792 <putch>
    74c2:	64 c1       	rjmp	.+712    	; 0x778c <main+0x38c>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    74c4:	82 34       	cpi	r24, 0x42	; 66
    74c6:	11 f4       	brne	.+4      	; 0x74cc <main+0xcc>
      // SET DEVICE is ignored
      getNch(20);
    74c8:	84 e1       	ldi	r24, 0x14	; 20
    74ca:	03 c0       	rjmp	.+6      	; 0x74d2 <main+0xd2>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    74cc:	85 34       	cpi	r24, 0x45	; 69
    74ce:	19 f4       	brne	.+6      	; 0x74d6 <main+0xd6>
      // SET DEVICE EXT is ignored
      getNch(5);
    74d0:	85 e0       	ldi	r24, 0x05	; 5
    74d2:	86 d1       	rcall	.+780    	; 0x77e0 <verifySpace+0x10>
    74d4:	5b c1       	rjmp	.+694    	; 0x778c <main+0x38c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    74d6:	85 35       	cpi	r24, 0x55	; 85
    74d8:	79 f4       	brne	.+30     	; 0x74f8 <main+0xf8>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    74da:	63 d1       	rcall	.+710    	; 0x77a2 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    74dc:	e8 2e       	mov	r14, r24
    74de:	ff 24       	eor	r15, r15
    74e0:	60 d1       	rcall	.+704    	; 0x77a2 <getch>
    74e2:	08 2f       	mov	r16, r24
    74e4:	10 e0       	ldi	r17, 0x00	; 0
    74e6:	10 2f       	mov	r17, r16
    74e8:	00 27       	eor	r16, r16
    74ea:	0e 29       	or	r16, r14
    74ec:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    74ee:	00 0f       	add	r16, r16
    74f0:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    74f2:	6e d1       	rcall	.+732    	; 0x77d0 <verifySpace>
    74f4:	68 01       	movw	r12, r16
    74f6:	4a c1       	rjmp	.+660    	; 0x778c <main+0x38c>
    }
    else if(ch == STK_UNIVERSAL) {
    74f8:	86 35       	cpi	r24, 0x56	; 86
    74fa:	21 f4       	brne	.+8      	; 0x7504 <main+0x104>
      // UNIVERSAL command is ignored
      getNch(4);
    74fc:	84 e0       	ldi	r24, 0x04	; 4
    74fe:	70 d1       	rcall	.+736    	; 0x77e0 <verifySpace+0x10>
      putch(0x00);
    7500:	80 e0       	ldi	r24, 0x00	; 0
    7502:	de cf       	rjmp	.-68     	; 0x74c0 <main+0xc0>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7504:	84 36       	cpi	r24, 0x64	; 100
    7506:	09 f0       	breq	.+2      	; 0x750a <main+0x10a>
    7508:	c5 c0       	rjmp	.+394    	; 0x7694 <main+0x294>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint8_t bval;
      uint16_t len;
      length = (uint16_t)getch() << 8; /* getlen() */
    750a:	4b d1       	rcall	.+662    	; 0x77a2 <getch>
    750c:	90 e0       	ldi	r25, 0x00	; 0
    750e:	f8 2e       	mov	r15, r24
    7510:	ee 24       	eor	r14, r14
      length += getch();
    7512:	47 d1       	rcall	.+654    	; 0x77a2 <getch>
    7514:	e8 0e       	add	r14, r24
    7516:	f1 1c       	adc	r15, r1
      bval = getch();
    7518:	44 d1       	rcall	.+648    	; 0x77a2 <getch>
    751a:	b8 2e       	mov	r11, r24
    751c:	e7 01       	movw	r28, r14
    751e:	00 e0       	ldi	r16, 0x00	; 0
    7520:	11 e0       	ldi	r17, 0x01	; 1
      //if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);

      // While that is going on, read in page contents
      bufPtr = buff;
      len = length;
      do *bufPtr++ = getch();
    7522:	3f d1       	rcall	.+638    	; 0x77a2 <getch>
    7524:	f8 01       	movw	r30, r16
    7526:	81 93       	st	Z+, r24
    7528:	8f 01       	movw	r16, r30
      while (--len);
    752a:	21 97       	sbiw	r28, 0x01	; 1
    752c:	d1 f7       	brne	.-12     	; 0x7522 <main+0x122>

      EEARL = 0; 
    752e:	11 bc       	out	0x21, r1	; 33
      EEARH = address >> 8;
    7530:	8d 2d       	mov	r24, r13
    7532:	99 27       	eor	r25, r25
    7534:	82 bd       	out	0x22, r24	; 34
      ch = EEARH >> 2;	// 1KB page size
    7536:	82 b5       	in	r24, 0x22	; 34

      if((0 == (pmask & (((uint32_t)1 << ch)))) && bval == 'F') { 
    7538:	86 95       	lsr	r24
    753a:	86 95       	lsr	r24
    753c:	28 2f       	mov	r18, r24
    753e:	d4 01       	movw	r26, r8
    7540:	c3 01       	movw	r24, r6
    7542:	02 2e       	mov	r0, r18
    7544:	04 c0       	rjmp	.+8      	; 0x754e <main+0x14e>
    7546:	b6 95       	lsr	r27
    7548:	a7 95       	ror	r26
    754a:	97 95       	ror	r25
    754c:	87 95       	ror	r24
    754e:	0a 94       	dec	r0
    7550:	d2 f7       	brpl	.-12     	; 0x7546 <main+0x146>
    7552:	80 fd       	sbrc	r24, 0
    7554:	15 c0       	rjmp	.+42     	; 0x7580 <main+0x180>
    7556:	f6 e4       	ldi	r31, 0x46	; 70
    7558:	bf 16       	cp	r11, r31
    755a:	91 f4       	brne	.+36     	; 0x7580 <main+0x180>
	pmask |= ((uint32_t)1 << ch);
    755c:	d2 01       	movw	r26, r4
    755e:	c1 01       	movw	r24, r2
    7560:	04 c0       	rjmp	.+8      	; 0x756a <main+0x16a>
    7562:	88 0f       	add	r24, r24
    7564:	99 1f       	adc	r25, r25
    7566:	aa 1f       	adc	r26, r26
    7568:	bb 1f       	adc	r27, r27
    756a:	2a 95       	dec	r18
    756c:	d2 f7       	brpl	.-12     	; 0x7562 <main+0x162>
    756e:	68 2a       	or	r6, r24
    7570:	79 2a       	or	r7, r25
    7572:	8a 2a       	or	r8, r26
    7574:	9b 2a       	or	r9, r27
      	// do page erase here
      	EECR = 0x94;
    7576:	af ba       	out	0x1f, r10	; 31
      	EECR = 0x92;
    7578:	82 e9       	ldi	r24, 0x92	; 146
    757a:	8f bb       	out	0x1f, r24	; 31
      	__asm__ __volatile__ ("nop" ::); 
    757c:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);      
    757e:	00 00       	nop
      }

      // Read command terminator, start reply
      verifySpace();
    7580:	27 d1       	rcall	.+590    	; 0x77d0 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      //boot_spm_busy_wait();
      if (bval == 'E') {
    7582:	e5 e4       	ldi	r30, 0x45	; 69
    7584:	be 16       	cp	r11, r30
    7586:	b1 f4       	brne	.+44     	; 0x75b4 <main+0x1b4>
    7588:	96 01       	movw	r18, r12
    758a:	10 c0       	rjmp	.+32     	; 0x75ac <main+0x1ac>
	  for(len = 0; len < length; len++) {
	    //if(address >= 1022)
	 	//break;
	    EEARL = address++;
    758c:	21 bd       	out	0x21, r18	; 33
    758e:	2f 5f       	subi	r18, 0xFF	; 255
    7590:	3f 4f       	sbci	r19, 0xFF	; 255
	    EEARH = address >> 8;
    7592:	83 2f       	mov	r24, r19
    7594:	99 27       	eor	r25, r25
    7596:	82 bd       	out	0x22, r24	; 34
	    EEDR = buff[len];
    7598:	c0 50       	subi	r28, 0x00	; 0
    759a:	df 4f       	sbci	r29, 0xFF	; 255
    759c:	88 81       	ld	r24, Y
    759e:	80 bd       	out	0x20, r24	; 32
	    EECR = 0x04;
    75a0:	f4 e0       	ldi	r31, 0x04	; 4
    75a2:	ff bb       	out	0x1f, r31	; 31
	    EECR = 0x02;
    75a4:	82 e0       	ldi	r24, 0x02	; 2
    75a6:	8f bb       	out	0x1f, r24	; 31

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      //boot_spm_busy_wait();
      if (bval == 'E') {
	  for(len = 0; len < length; len++) {
    75a8:	cf 5f       	subi	r28, 0xFF	; 255
    75aa:	d0 40       	sbci	r29, 0x00	; 0
    75ac:	ce 15       	cp	r28, r14
    75ae:	df 05       	cpc	r29, r15
    75b0:	68 f3       	brcs	.-38     	; 0x758c <main+0x18c>
    75b2:	db c0       	rjmp	.+438    	; 0x776a <main+0x36a>
	    EECR = 0x04;
	    EECR = 0x02;
	  }
      } else {
#ifdef VIRTUAL_BOOT_PARTITION
	if ((uint16_t)(void*)address == 0) {
    75b4:	c1 14       	cp	r12, r1
    75b6:	d1 04       	cpc	r13, r1
    75b8:	09 f0       	breq	.+2      	; 0x75bc <main+0x1bc>
    75ba:	4e c0       	rjmp	.+156    	; 0x7658 <main+0x258>
	  // This is the reset vector page. We need to live-patch the code so the
	  // bootloader runs.
	  //
	  // Move RESET vector to WDT vector
	  rstVect0 = buff[0] | (buff[1] << 8);
    75bc:	60 91 00 01 	lds	r22, 0x0100
    75c0:	70 91 01 01 	lds	r23, 0x0101
    75c4:	87 2f       	mov	r24, r23
    75c6:	90 e0       	ldi	r25, 0x00	; 0
    75c8:	98 2f       	mov	r25, r24
    75ca:	88 27       	eor	r24, r24
    75cc:	26 2f       	mov	r18, r22
    75ce:	30 e0       	ldi	r19, 0x00	; 0
    75d0:	82 2b       	or	r24, r18
    75d2:	93 2b       	or	r25, r19
    75d4:	90 93 85 01 	sts	0x0185, r25
    75d8:	80 93 84 01 	sts	0x0184, r24
	  rstVect1 = buff[2] | (buff[3] << 8);
    75dc:	40 91 02 01 	lds	r20, 0x0102
    75e0:	50 91 03 01 	lds	r21, 0x0103
    75e4:	85 2f       	mov	r24, r21
    75e6:	90 e0       	ldi	r25, 0x00	; 0
    75e8:	98 2f       	mov	r25, r24
    75ea:	88 27       	eor	r24, r24
    75ec:	24 2f       	mov	r18, r20
    75ee:	30 e0       	ldi	r19, 0x00	; 0
    75f0:	82 2b       	or	r24, r18
    75f2:	93 2b       	or	r25, r19
    75f4:	90 93 87 01 	sts	0x0187, r25
    75f8:	80 93 86 01 	sts	0x0186, r24
	  wdtVect0 = buff[24] | (buff[25] << 8);
    75fc:	20 91 18 01 	lds	r18, 0x0118
    7600:	80 91 19 01 	lds	r24, 0x0119
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	98 2f       	mov	r25, r24
    7608:	88 27       	eor	r24, r24
    760a:	30 e0       	ldi	r19, 0x00	; 0
    760c:	82 2b       	or	r24, r18
    760e:	93 2b       	or	r25, r19
    7610:	90 93 89 01 	sts	0x0189, r25
    7614:	80 93 88 01 	sts	0x0188, r24
	  wdtVect1 = buff[26] | (buff[27] << 8);
    7618:	20 91 1a 01 	lds	r18, 0x011A
    761c:	80 91 1b 01 	lds	r24, 0x011B
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	98 2f       	mov	r25, r24
    7624:	88 27       	eor	r24, r24
    7626:	30 e0       	ldi	r19, 0x00	; 0
    7628:	82 2b       	or	r24, r18
    762a:	93 2b       	or	r25, r19
    762c:	90 93 8b 01 	sts	0x018B, r25
    7630:	80 93 8a 01 	sts	0x018A, r24

	  buff[24] = buff[0];
    7634:	60 93 18 01 	sts	0x0118, r22
	  buff[25] = buff[1];
    7638:	70 93 19 01 	sts	0x0119, r23
	  buff[26] = buff[2];
    763c:	40 93 1a 01 	sts	0x011A, r20
	  buff[27] = buff[3];
    7640:	50 93 1b 01 	sts	0x011B, r21
	
	  // Add jump to bootloader at RESET vector
	  buff[0] = 0x0c;
    7644:	8c e0       	ldi	r24, 0x0C	; 12
    7646:	80 93 00 01 	sts	0x0100, r24
	  buff[1] = 0x94; // jmp 
    764a:	a0 92 01 01 	sts	0x0101, r10
	  buff[2] = 0x00;
    764e:	10 92 02 01 	sts	0x0102, r1
	  buff[3] = 0x3a; // 0x7400 (0x3a00) 
    7652:	ea e3       	ldi	r30, 0x3A	; 58
    7654:	e0 93 03 01 	sts	0x0103, r30
    7658:	e0 e0       	ldi	r30, 0x00	; 0
    765a:	f1 e0       	ldi	r31, 0x01	; 1
	}
#endif
      	// Write from programming buffer
	pdword_t wPtr = (pdword_t)buff;
      	for(length = 0; length < SPM_PAGESIZE; length+=4, wPtr++) {
	      EEARL = 0; EEDR = wPtr->byte[0];
    765c:	11 bc       	out	0x21, r1	; 33
    765e:	80 81       	ld	r24, Z
    7660:	80 bd       	out	0x20, r24	; 32
	      EEARL = 1; EEDR = wPtr->byte[1];
    7662:	81 e0       	ldi	r24, 0x01	; 1
    7664:	81 bd       	out	0x21, r24	; 33
    7666:	81 81       	ldd	r24, Z+1	; 0x01
    7668:	80 bd       	out	0x20, r24	; 32
	      EEARL = 2; EEDR = wPtr->byte[2];
    766a:	82 e0       	ldi	r24, 0x02	; 2
    766c:	81 bd       	out	0x21, r24	; 33
    766e:	82 81       	ldd	r24, Z+2	; 0x02
    7670:	80 bd       	out	0x20, r24	; 32
	      EEARL = 3; EEDR = wPtr->byte[3];
    7672:	83 e0       	ldi	r24, 0x03	; 3
    7674:	81 bd       	out	0x21, r24	; 33
    7676:	83 81       	ldd	r24, Z+3	; 0x03
    7678:	80 bd       	out	0x20, r24	; 32
    767a:	8e 2f       	mov	r24, r30
    767c:	8c 0d       	add	r24, r12
	      EEARL = (address + length) & 0xff;
    767e:	81 bd       	out	0x21, r24	; 33
	      EECR = 0xA4;
    7680:	84 ea       	ldi	r24, 0xA4	; 164
    7682:	8f bb       	out	0x1f, r24	; 31
	      EECR = 0xA2;
    7684:	82 ea       	ldi	r24, 0xA2	; 162
    7686:	8f bb       	out	0x1f, r24	; 31
	  buff[3] = 0x3a; // 0x7400 (0x3a00) 
	}
#endif
      	// Write from programming buffer
	pdword_t wPtr = (pdword_t)buff;
      	for(length = 0; length < SPM_PAGESIZE; length+=4, wPtr++) {
    7688:	34 96       	adiw	r30, 0x04	; 4
    768a:	81 e0       	ldi	r24, 0x01	; 1
    768c:	e0 38       	cpi	r30, 0x80	; 128
    768e:	f8 07       	cpc	r31, r24
    7690:	29 f7       	brne	.-54     	; 0x765c <main+0x25c>
    7692:	7c c0       	rjmp	.+248    	; 0x778c <main+0x38c>
	      EECR = 0xA2;
	}
      }
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7694:	84 37       	cpi	r24, 0x74	; 116
    7696:	09 f0       	breq	.+2      	; 0x769a <main+0x29a>
    7698:	6b c0       	rjmp	.+214    	; 0x7770 <main+0x370>
      // READ PAGE - we only read flash
      uint8_t bval;

      length = getch() << 8;			/* getlen() */
    769a:	83 d0       	rcall	.+262    	; 0x77a2 <getch>
    769c:	90 e0       	ldi	r25, 0x00	; 0
    769e:	f8 2e       	mov	r15, r24
    76a0:	ee 24       	eor	r14, r14
      length += getch();
    76a2:	7f d0       	rcall	.+254    	; 0x77a2 <getch>
    76a4:	e8 0e       	add	r14, r24
    76a6:	f1 1c       	adc	r15, r1
      bval = getch();
    76a8:	7c d0       	rcall	.+248    	; 0x77a2 <getch>
    76aa:	18 2f       	mov	r17, r24

      verifySpace();
    76ac:	91 d0       	rcall	.+290    	; 0x77d0 <verifySpace>

      if( bval == 'E') {
    76ae:	15 34       	cpi	r17, 0x45	; 69
    76b0:	89 f4       	brne	.+34     	; 0x76d4 <main+0x2d4>
    76b2:	e6 01       	movw	r28, r12
    76b4:	87 01       	movw	r16, r14
	do {
	    EEARL = address++;
    76b6:	c1 bd       	out	0x21, r28	; 33
    76b8:	21 96       	adiw	r28, 0x01	; 1
	    EEARH = address >> 8;
    76ba:	8d 2f       	mov	r24, r29
    76bc:	99 27       	eor	r25, r25
    76be:	82 bd       	out	0x22, r24	; 34
	    EECR = 0x01;
    76c0:	e1 e0       	ldi	r30, 0x01	; 1
    76c2:	ef bb       	out	0x1f, r30	; 31
	    __asm__ __volatile__ ("nop" ::);
    76c4:	00 00       	nop
	    __asm__ __volatile__ ("nop" ::);
    76c6:	00 00       	nop
	    putch(EEDR);
    76c8:	80 b5       	in	r24, 0x20	; 32
    76ca:	63 d0       	rcall	.+198    	; 0x7792 <putch>
	} while (--length);
    76cc:	01 50       	subi	r16, 0x01	; 1
    76ce:	10 40       	sbci	r17, 0x00	; 0
    76d0:	91 f7       	brne	.-28     	; 0x76b6 <main+0x2b6>
    76d2:	4b c0       	rjmp	.+150    	; 0x776a <main+0x36a>
    76d4:	e6 01       	movw	r28, r12
    76d6:	87 01       	movw	r16, r14
      } else {
      	do {
#ifdef VIRTUAL_BOOT_PARTITION
	   // Undo vector patch in bottom page so verify passes
	   if (address == 0)		ch = rstVect0 & 0xff;
    76d8:	20 97       	sbiw	r28, 0x00	; 0
    76da:	29 f4       	brne	.+10     	; 0x76e6 <main+0x2e6>
    76dc:	80 91 84 01 	lds	r24, 0x0184
    76e0:	90 91 85 01 	lds	r25, 0x0185
    76e4:	3c c0       	rjmp	.+120    	; 0x775e <main+0x35e>
	   else if (address == 1)	ch = rstVect0 >> 8;
    76e6:	c1 30       	cpi	r28, 0x01	; 1
    76e8:	d1 05       	cpc	r29, r1
    76ea:	29 f4       	brne	.+10     	; 0x76f6 <main+0x2f6>
    76ec:	80 91 84 01 	lds	r24, 0x0184
    76f0:	90 91 85 01 	lds	r25, 0x0185
    76f4:	0f c0       	rjmp	.+30     	; 0x7714 <main+0x314>
	   else if (address == 2)	ch = rstVect1 & 0xff;
    76f6:	c2 30       	cpi	r28, 0x02	; 2
    76f8:	d1 05       	cpc	r29, r1
    76fa:	29 f4       	brne	.+10     	; 0x7706 <main+0x306>
    76fc:	80 91 86 01 	lds	r24, 0x0186
    7700:	90 91 87 01 	lds	r25, 0x0187
    7704:	2c c0       	rjmp	.+88     	; 0x775e <main+0x35e>
	   else if (address == 3)	ch = rstVect1 >> 8;
    7706:	c3 30       	cpi	r28, 0x03	; 3
    7708:	d1 05       	cpc	r29, r1
    770a:	39 f4       	brne	.+14     	; 0x771a <main+0x31a>
    770c:	80 91 86 01 	lds	r24, 0x0186
    7710:	90 91 87 01 	lds	r25, 0x0187
    7714:	89 2f       	mov	r24, r25
    7716:	99 27       	eor	r25, r25
    7718:	22 c0       	rjmp	.+68     	; 0x775e <main+0x35e>
	   else if (address == 24)	ch = wdtVect0 & 0xff;
    771a:	c8 31       	cpi	r28, 0x18	; 24
    771c:	d1 05       	cpc	r29, r1
    771e:	29 f4       	brne	.+10     	; 0x772a <main+0x32a>
    7720:	80 91 88 01 	lds	r24, 0x0188
    7724:	90 91 89 01 	lds	r25, 0x0189
    7728:	1a c0       	rjmp	.+52     	; 0x775e <main+0x35e>
	   else if (address == 25)	ch = wdtVect0 >> 8;
    772a:	c9 31       	cpi	r28, 0x19	; 25
    772c:	d1 05       	cpc	r29, r1
    772e:	29 f4       	brne	.+10     	; 0x773a <main+0x33a>
    7730:	80 91 88 01 	lds	r24, 0x0188
    7734:	90 91 89 01 	lds	r25, 0x0189
    7738:	ed cf       	rjmp	.-38     	; 0x7714 <main+0x314>
	   else if (address == 26)	ch = wdtVect1 & 0xff;
    773a:	ca 31       	cpi	r28, 0x1A	; 26
    773c:	d1 05       	cpc	r29, r1
    773e:	29 f4       	brne	.+10     	; 0x774a <main+0x34a>
    7740:	80 91 8a 01 	lds	r24, 0x018A
    7744:	90 91 8b 01 	lds	r25, 0x018B
    7748:	0a c0       	rjmp	.+20     	; 0x775e <main+0x35e>
	   else if (address == 27)	ch = wdtVect1 >> 8;
    774a:	cb 31       	cpi	r28, 0x1B	; 27
    774c:	d1 05       	cpc	r29, r1
    774e:	29 f4       	brne	.+10     	; 0x775a <main+0x35a>
    7750:	80 91 8a 01 	lds	r24, 0x018A
    7754:	90 91 8b 01 	lds	r25, 0x018B
    7758:	dd cf       	rjmp	.-70     	; 0x7714 <main+0x314>
	   // Since RAMPZ should already be set, we need to use EPLM directly.
	   // read a Flash and increment the address (may increment RAMPZ)
	   __asm__ ("elpm %0,Z\n" : "=r" (ch) : "z" (address));
	#else
	   // read a Flash byte and increment the address
	   __asm__ ("lpm %0,Z\n" : "=r" (ch) : "z" (address));
    775a:	fe 01       	movw	r30, r28
    775c:	84 91       	lpm	r24, Z+
	   //ch = *((uint8_t *)(0x4000 + address));
	#endif
#endif
	   }
	   address++;
    775e:	21 96       	adiw	r28, 0x01	; 1
           putch(ch);
    7760:	18 d0       	rcall	.+48     	; 0x7792 <putch>
         } while (--length);
    7762:	01 50       	subi	r16, 0x01	; 1
    7764:	10 40       	sbci	r17, 0x00	; 0
    7766:	09 f0       	breq	.+2      	; 0x776a <main+0x36a>
    7768:	b7 cf       	rjmp	.-146    	; 0x76d8 <main+0x2d8>
    776a:	ce 0c       	add	r12, r14
    776c:	df 1c       	adc	r13, r15
    776e:	0e c0       	rjmp	.+28     	; 0x778c <main+0x38c>
      }
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7770:	85 37       	cpi	r24, 0x75	; 117
    7772:	39 f4       	brne	.+14     	; 0x7782 <main+0x382>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7774:	2d d0       	rcall	.+90     	; 0x77d0 <verifySpace>
      putch(SIGNATURE_0);
    7776:	8e e1       	ldi	r24, 0x1E	; 30
    7778:	0c d0       	rcall	.+24     	; 0x7792 <putch>
      putch(SIGNATURE_1);
    777a:	85 e9       	ldi	r24, 0x95	; 149
    777c:	0a d0       	rcall	.+20     	; 0x7792 <putch>
      putch(SIGNATURE_2);
    777e:	8f e0       	ldi	r24, 0x0F	; 15
    7780:	9f ce       	rjmp	.-706    	; 0x74c0 <main+0xc0>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7782:	81 35       	cpi	r24, 0x51	; 81
    7784:	11 f4       	brne	.+4      	; 0x778a <main+0x38a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7786:	8c e0       	ldi	r24, 0x0C	; 12
    7788:	1d d0       	rcall	.+58     	; 0x77c4 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    778a:	22 d0       	rcall	.+68     	; 0x77d0 <verifySpace>
    }
    putch(STK_OK);
    778c:	80 e1       	ldi	r24, 0x10	; 16
    778e:	01 d0       	rcall	.+2      	; 0x7792 <putch>
    7790:	8a ce       	rjmp	.-748    	; 0x74a6 <main+0xa6>

00007792 <putch>:
  }
}

void putch(char ch) {
    7792:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7794:	80 91 c0 00 	lds	r24, 0x00C0
    7798:	85 ff       	sbrs	r24, 5
    779a:	fc cf       	rjmp	.-8      	; 0x7794 <putch+0x2>
  UART_UDR = ch;
    779c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    77a0:	08 95       	ret

000077a2 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    77a2:	80 91 c0 00 	lds	r24, 0x00C0
    77a6:	87 ff       	sbrs	r24, 7
    77a8:	fc cf       	rjmp	.-8      	; 0x77a2 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    77aa:	80 91 c0 00 	lds	r24, 0x00C0
    77ae:	84 fd       	sbrc	r24, 4
    77b0:	01 c0       	rjmp	.+2      	; 0x77b4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    77b2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    77b4:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PORT ^= _BV(LED);
#endif

  return ch;
}
    77b8:	08 95       	ret

000077ba <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    77ba:	93 e1       	ldi	r25, 0x13	; 19
    77bc:	9a 95       	dec	r25
    77be:	f1 f7       	brne	.-4      	; 0x77bc <uartDelay+0x2>
    77c0:	08 95       	ret
    "1:dec r25\n"
    "brne 1b\n"
    "ret\n"
    ::[count] "M" (UART_B_VALUE)
  );
}
    77c2:	08 95       	ret

000077c4 <watchdogConfig>:
  );
}

void watchdogConfig(uint8_t x) {
#if 1
  WDTCSR = _BV(WDCE) | _BV(WDE);
    77c4:	e0 e6       	ldi	r30, 0x60	; 96
    77c6:	f0 e0       	ldi	r31, 0x00	; 0
    77c8:	98 e1       	ldi	r25, 0x18	; 24
    77ca:	90 83       	st	Z, r25
  WDTCSR = x;
    77cc:	80 83       	st	Z, r24
#endif
}
    77ce:	08 95       	ret

000077d0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    77d0:	e8 df       	rcall	.-48     	; 0x77a2 <getch>
    77d2:	80 32       	cpi	r24, 0x20	; 32
    77d4:	19 f0       	breq	.+6      	; 0x77dc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_32MS);    // shorten WD timeout
    77d6:	8d e0       	ldi	r24, 0x0D	; 13
    77d8:	f5 df       	rcall	.-22     	; 0x77c4 <watchdogConfig>
    77da:	ff cf       	rjmp	.-2      	; 0x77da <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    77dc:	84 e1       	ldi	r24, 0x14	; 20
}
    77de:	d9 cf       	rjmp	.-78     	; 0x7792 <putch>
    "ret\n"
    ::[count] "M" (UART_B_VALUE)
  );
}

void getNch(uint8_t count) {
    77e0:	1f 93       	push	r17

000077e2 <getNch>:
    77e2:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    77e4:	de df       	rcall	.-68     	; 0x77a2 <getch>
    77e6:	11 50       	subi	r17, 0x01	; 1
    77e8:	e9 f7       	brne	.-6      	; 0x77e4 <getNch+0x2>
  verifySpace();
    77ea:	f2 df       	rcall	.-28     	; 0x77d0 <verifySpace>
}
    77ec:	1f 91       	pop	r17
    77ee:	08 95       	ret

000077f0 <appStart>:
void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  //__asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
  GPIOR2 = rstFlags;
    77f0:	8b bd       	out	0x2b, r24	; 43

  watchdogConfig(WATCHDOG_OFF);
    77f2:	80 e0       	ldi	r24, 0x00	; 0
    77f4:	e7 df       	rcall	.-50     	; 0x77c4 <watchdogConfig>
  __asm__ __volatile__ (
    77f6:	ec e0       	ldi	r30, 0x0C	; 12
    77f8:	ff 27       	eor	r31, r31
    77fa:	09 94       	ijmp
